# https://www.codewars.com/kata/58c8c723df10450b21000024/train/python

class Image:
    def __init__(self, data, w, h): 
        self.pixels = data
        self.width = w
        self.height = h

class Central_Pixels_Finder(Image):

    def get_nbd(self, pos):
        nbd = set()
        nbd.add(self.depth[pos - self.width]) # up
        nbd.add(self.depth[pos - 1]) # left



        if self.depth[pos + self.width]:
            nbd.add(self.depth[pos + self.width ]) # down
        else:
            nbd.add(self.pd[pos + self.width][1])    

        if self.depth[pos + 1 ]:
            nbd.add(self.depth[pos + 1]) # right
        else:
            nbd.add(self.pd[pos +1 ][0])


        if 0 in nbd :
            nbd.remove(0)
        return min(nbd)

    def central_pixels(self, colour):

        max_depth = { c:[1, []] for c in set(self.pixels) }
        if colour not in max_depth:
            return []

        self.depth = [0] * self.width * self.height
        self.pd    = [[0, 0] for _ in range(self.width * self.height) ]

        for x in range(self.width):
            pos = x
            max_depth[self.pixels[pos]][1].append(pos)
            self.depth[pos] = 1
            self.pd[pos] = [1, 1]
            pos = self.width * (self.height - 1) + x
            max_depth[self.pixels[pos]][1].append(pos)
            self.depth[pos] = 1
            self.pd[pos] = [1, 1]

        for y in range(1, self.height -1):
            pos = y * self.width
            max_depth[self.pixels[pos]][1].append(pos)
            self.depth[pos] = 1
            self.pd[pos] = [1, 1]
            pos = (y + 1) * self.width - 1
            max_depth[self.pixels[pos]][1].append(pos)
            self.depth[pos] = 1
            self.pd[pos] = [1, 1]


        for x in range(self.width - 2 , 0, -1):
            for y in range(self.height - 2, 0, -1):
                pos = x + y * self.width
                clr = self.pixels[pos]
                if (self.pixels[pos - self.width] != clr 
                    or self.pixels[pos + self.width] != clr 
                    or self.pixels[pos + 1] != clr 
                    or self.pixels[pos - 1] != clr ):
                    self.depth[pos] = 1
                    self.pd[pos] = [1, 1]
                    max_depth[clr][1].append(pos)
                else:
                    self.pd[pos] = [self.pd[pos + 1][0] + 1, self.pd[pos + self.width][1] + 1]
                    

        for x in range(1, self.width - 1):
            for y in range(1, self.height - 1) :
                pos = x + y * self.width
                if not self.depth[pos]:
                    new_depth = self.get_nbd(pos) + 1
                    clr = self.pixels[pos]
                    if max_depth[clr][0] == new_depth:
                        max_depth[clr][1].append(pos)
                    elif max_depth[clr][0] < new_depth:
                        max_depth[clr][0] = new_depth
                        max_depth[clr][1] = [pos]
                    self.depth[pos] = new_depth
                
        return max_depth[colour][1]

    
                            #   0 1 2 3 4 5 6 7 8 9
# image = Central_Pixels_Finder( [1,1,4,4,4,4,2,2,2,2,
#                                 1,1,1,1,2,2,2,2,2,2,
#                                 1,1,1,1,2,2,2,2,2,2,
#                                 1,1,1,1,1,3,2,2,2,2,
#                                 1,1,1,1,1,3,3,3,2,2,
#                                 1,1,1,1,1,1,3,3,3,3], 10, 6 )


pixels = [61, 61, 61, 62, 62, 60, 62, 62, 62, 61, 60, 60, 60, 61, 60, 62, 61, 62, 61, 60, 60, 60, 62, 61, 62, 61, 60, 61, 60, 60, 60, 62, 62, 60, 62, 62, 60, 60, 61, 61, 62, 62, 62, 60, 62, 61, 62, 62, 60, 60, 60, 60, 60, 62, 62, 62, 60, 61, 62, 62, 62, 60, 60, 62, 62, 62, 61, 61, 60, 60, 62, 60, 61, 62, 62, 61, 62, 61, 60, 61, 62, 61, 62, 60, 62, 60, 62, 60, 62, 62, 60, 61, 62, 61, 61, 62, 62, 61, 60, 61, 61, 60, 60, 13, 13, 13, 61, 62, 60, 62, 61, 62, 61, 61, 62, 62, 61, 60, 62, 60, 60, 61, 61, 62, 61, 60, 60, 60, 60, 61, 62, 61, 62, 61, 62, 62, 60, 61, 60, 61, 62, 62, 62, 62, 13, 13, 13, 13, 13, 60, 62, 62, 62, 61, 61, 60, 61, 62, 60, 60, 62, 60, 60, 60, 62, 61, 62, 62, 62, 61, 62, 60, 60, 61, 61, 61, 60, 62, 60, 61, 62, 62, 61, 62, 60, 13, 13, 13, 13, 13, 13, 13, 60, 62, 61, 62, 61, 62, 60, 62, 61, 60, 61, 62, 60, 60, 62, 60, 62, 60, 61, 61, 60, 61, 60, 62, 60, 60, 61, 61, 61, 60, 62, 61, 60, 62, 61, 13, 13, 13, 13, 13, 13, 13, 61, 60, 62, 60, 62, 60, 62, 61, 60, 60, 61, 60, 60, 60, 60, 60, 61, 61, 60, 60, 61, 60, 62, 60, 60, 61, 62, 62, 61, 62, 61, 60, 61, 60, 61, 13, 13, 13, 13, 13, 13, 13, 60, 60, 62, 62, 61, 60, 61, 62, 60, 61, 61, 60, 62, 62, 62, 61, 61, 60, 61, 61, 62, 60, 60, 60, 62, 62, 61, 61, 62, 62, 62, 60, 62, 60, 60, 60, 13, 13, 13, 13, 13, 60, 62, 62, 61, 61, 62, 61, 61, 60, 62, 62, 61, 61, 62, 62, 62, 61, 61, 60, 62, 61, 60, 62, 60, 61, 60, 60, 62, 60, 60, 61, 61, 62, 61, 60, 60, 62, 61, 13, 13, 13, 62, 61, 62, 61, 62, 60, 61, 62, 61, 60, 62, 60, 60, 61, 62, 62, 60, 60, 60, 61, 60, 60, 60, 61, 62, 61, 62, 60, 60, 61, 60, 61, 62, 60, 60, 61, 61, 62, 62, 62, 60, 60, 62, 60, 62, 61, 61, 60, 61, 60, 60, 62, 61, 61, 62, 60, 61, 60, 62, 60, 61, 62, 61, 61, 61, 60, 62, 61, 62, 62, 61, 60, 61, 62, 62, 62, 62, 60, 61, 62, 62, 62, 61, 61, 61, 61, 62, 61, 60, 61, 62, 60, 60, 62, 61, 62, 62, 61, 61, 60, 61, 62, 61, 62, 60, 60, 62, 60, 60, 62, 60, 61, 60, 60, 60, 61, 62, 61, 62, 62, 61, 60, 61, 61, 62, 61, 60, 62, 61, 60, 62, 62, 60, 61, 62, 60, 60, 60, 61, 62, 62, 60, 62, 60, 62, 62, 60, 61, 60, 62, 62, 62, 60, 61, 62, 60, 61, 62, 60, 61, 60, 62, 60, 62, 62, 62, 62, 61, 61, 61, 62, 61, 60, 61, 60, 60, 60, 60, 61, 61, 62, 60, 60, 60, 62, 62, 61, 61, 61, 60, 60, 62, 60, 60, 62, 62, 61, 62, 61, 61, 60, 62, 60, 60, 61, 61, 62, 61, 60, 62, 62, 60, 60, 61, 62, 61, 62, 60, 61, 62, 62, 62, 60, 60, 60, 61, 60, 61, 61, 60, 60, 60, 61, 60, 62, 62, 60, 60, 61, 62, 60, 62, 62, 62, 61, 62, 61, 61, 61, 62, 60, 62, 60, 62, 60, 62, 60, 62, 61, 62, 62, 61, 62, 60, 60, 60, 62, 62, 60, 61, 60, 62, 62, 61, 60, 62, 62, 62, 62, 62, 60, 61, 61, 62, 60, 60, 60, 62, 62, 62, 60, 61, 61, 61, 60, 61, 60, 60, 62, 61, 61, 61, 60, 61, 61, 61, 60, 61, 62, 61, 60, 62, 62, 62, 62, 62, 62, 60, 61, 62, 61, 62, 60, 61, 61, 61, 61, 60, 62, 61, 60, 60, 60, 60, 61, 61, 60, 60, 62, 60, 60, 62, 61, 62, 61, 61, 60, 60, 61, 62, 60, 62, 61, 60, 60, 62, 62, 61, 60, 60, 60, 60, 60, 60, 61, 60, 60, 61, 62, 62, 60, 61, 61, 60, 62, 60, 61, 61, 62, 62, 60, 62, 60, 61, 61, 60, 61, 62, 61, 61, 62, 61, 62, 60, 60, 60, 61, 60, 60, 62, 61, 60, 60, 62, 60, 61, 62, 61, 61, 61, 62, 62, 60, 60, 62, 62, 62, 62, 60, 61, 62, 60, 62, 60, 61, 60, 61, 61, 61, 60, 62, 60, 60, 61, 60, 60, 61, 62, 60, 60, 60, 60, 60, 62, 60, 61, 60, 61, 62, 60, 61, 61, 61, 60, 60, 60, 60, 62, 60, 62, 62, 62, 62, 60, 62, 62, 61, 60, 60, 61, 60, 60, 60, 60, 60, 61, 60, 61, 61, 62, 60, 60, 62, 62, 62, 62, 61, 60, 60, 61, 60, 62, 62, 61, 60, 62, 60, 61, 60, 62, 61, 60, 62, 61, 62, 62, 60, 61, 61, 60, 60, 60, 60, 62, 60, 62, 61, 60, 61, 60, 62, 62, 61, 60, 60, 60, 61, 60, 60, 61, 62, 61, 60, 62, 62, 61, 60, 60, 62, 62, 61, 62, 61, 60, 61, 61, 61, 62, 60, 61, 62, 61, 61, 61, 62, 60, 62, 60, 62, 62, 61, 61, 60, 60, 61, 61, 60, 61, 60, 62, 62, 62, 62, 61, 61, 62, 61, 60, 61, 60, 62, 62, 61, 61, 60, 61, 61, 60, 61, 60, 60, 60, 61, 61, 62, 62, 61, 62, 62, 62, 60, 62, 62, 62, 62, 62, 61, 62, 62, 61, 60, 62, 60, 61, 62, 62, 60, 61, 60, 62, 62, 60, 61, 61, 60, 61, 60, 61, 61, 60, 62, 61, 61, 60, 60, 60, 61, 61, 60, 62, 62, 60, 62, 62, 61, 61, 62, 61, 60, 62, 60, 62, 62, 62, 61, 61, 60, 61, 62, 61, 62, 62, 62, 60, 61, 61, 60, 62, 60, 61, 62, 60, 60, 61, 62, 60, 60, 62, 62, 61, 62, 62, 60, 60, 60, 60, 61, 61, 60, 61, 62, 62, 60, 60, 61, 61, 60, 62, 61, 62, 62, 62, 61, 62, 61, 60, 62, 61, 60, 62, 61, 62, 60, 62, 60, 62, 60, 62, 60, 60, 62, 60, 61, 62, 61, 61, 60, 62, 61, 60, 60, 61, 62, 60, 60, 60, 60, 61, 60, 61, 62, 60, 60, 62, 62, 61, 60, 60, 61, 61, 60, 60, 61, 60, 60, 61, 62, 62, 60, 60, 62, 62, 60, 61, 61, 62, 62, 60, 61, 61, 61, 60, 62, 60, 61, 61, 61, 60, 61, 62, 60, 60, 62, 60, 61, 60, 60, 60, 62, 61, 62, 60, 62, 62, 62, 60, 60, 60, 60, 60, 60, 60, 61, 60, 61, 60, 62, 60, 62, 60, 60, 60, 62, 60, 62, 61, 62, 61, 60, 61, 61, 62, 60, 62, 60, 60, 61, 61, 62, 61, 62, 62, 60, 61, 62, 62, 61, 62, 62, 60, 60, 61, 61, 61, 62, 61, 61, 62, 61, 61, 60, 61, 62, 62, 60, 60, 62, 62, 62, 62, 62, 61, 60, 61, 60, 61, 60, 60, 62, 61, 60, 61, 62, 61, 61, 62, 61, 61, 60, 60, 60, 62, 61, 60, 62, 61, 62, 61, 60, 62, 60, 60, 61, 61, 62, 60, 62, 62, 61, 60, 60, 61, 62, 62, 60, 61, 62, 61, 60, 60, 60, 62, 62, 62, 60, 62, 61, 61, 60, 61, 60, 62, 61, 61, 60, 61, 60, 62, 60, 62, 61, 60, 60, 62, 61, 62, 62, 62, 61, 60, 60, 61, 61, 62, 62, 62, 62, 61, 61, 62, 61, 62, 61, 61, 61, 60, 62, 60, 60, 62, 62, 60, 61, 62, 60, 60, 61, 61, 62, 61, 61, 62, 62, 60, 60, 60, 62, 61, 62, 61, 60, 61, 62, 62, 60, 62, 61, 62, 62, 62, 61, 62, 61, 62, 60, 62, 60, 62, 61, 61, 60, 60, 62, 62, 60, 60, 62, 60, 61, 61, 62, 60, 60, 60, 62, 61, 61, 60, 62, 62, 60, 60, 61, 61, 61, 60, 61, 62, 61, 62, 62, 62, 62, 61, 60, 60, 61, 61, 61, 60, 62, 62, 60, 60, 61, 62, 62, 62, 62, 61, 60, 61, 62, 60, 61, 61, 60, 61, 61, 61, 60, 60, 62, 61, 61, 62, 61, 60, 61, 62, 62, 61, 62, 61, 61, 61, 62, 62, 62, 61, 60, 60, 61, 62, 60, 60, 60, 61, 62, 62, 60, 61, 62, 61, 62, 62, 60, 61, 60, 61, 60, 61, 60, 60, 61, 61, 62, 60, 61, 60, 62, 61, 60, 62, 62, 60, 61, 62, 60, 62, 62, 62, 60, 60, 62, 62, 62, 62, 60, 61, 60, 61, 61, 62, 62, 61, 62, 62, 61, 61, 61, 62, 60, 61, 61, 60, 60, 61, 62, 61, 60, 62, 62, 61, 60, 60, 62, 62, 60, 60, 60, 60, 61, 61, 62, 62, 62, 62, 62, 62, 61, 62, 60, 60, 60, 61, 60, 62, 62, 60, 61, 61, 61, 61, 62, 62, 62, 60, 61, 60, 62, 62, 60, 61, 60, 61, 60, 61, 60, 61, 62, 60, 62, 60, 62, 61, 60, 61, 62, 62, 62, 60, 62, 61, 61, 60, 60, 62, 62, 61, 61, 61, 61, 62, 61, 60, 62, 62, 60, 62, 60, 62, 60, 62, 61, 60, 62, 60, 60, 61, 60, 60, 61, 60, 61, 60, 62, 60, 61, 60, 61, 61, 62, 62, 62, 62, 62, 62, 61, 61, 62, 62, 60, 61, 62, 62, 61, 61, 62, 61, 60, 60, 62, 62, 61, 61, 60, 62, 60, 60, 61, 61, 60, 61, 61, 61, 60, 61, 60, 61, 60, 62, 60, 62, 62, 62, 60, 62, 60, 62, 61, 61, 61, 60, 60, 62, 60, 61, 61, 60, 60, 60, 61, 61, 60, 60, 60, 60, 62, 60, 60, 62, 62, 61, 62, 61, 62, 61, 62, 62, 61, 61, 60, 60, 61, 61, 61, 61, 60, 62, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61, 60, 61, 62, 61, 61, 60, 61, 60, 60, 60, 61, 62, 61, 62, 62, 60, 61, 60, 62, 61, 60, 62, 60, 62, 60, 62, 60, 60, 62, 62, 60, 62, 62, 61, 62, 62, 62, 61, 60, 62, 60, 61, 61, 60, 62, 60, 60, 61, 60, 62, 60, 60, 60, 61, 62, 62, 60, 60, 60, 61, 62, 62, 62, 62, 61, 60, 61, 62, 62, 61, 62, 62, 61, 62, 61, 62, 62, 61, 60, 62, 62, 62, 61, 60, 61, 62, 61, 62, 61, 60, 62, 62, 60, 60, 60, 61, 61, 62]
w = 42
h = 43
c = 13

image = Central_Pixels_Finder(pixels, w, h)

print(image.central_pixels(c))
# [273] should equal [230]
